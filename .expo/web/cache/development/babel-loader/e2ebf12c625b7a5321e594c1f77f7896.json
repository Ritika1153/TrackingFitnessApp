{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nexport default {\n  get name() {\n    return 'ExpoClipboard';\n  },\n\n  getStringAsync: function () {\n    var _getStringAsync = _asyncToGenerator(function* () {\n      var text = '';\n\n      try {\n        text = yield navigator.clipboard.readText();\n      } catch (e) {\n        try {\n          text = window.clipboardData.getData('Text');\n        } catch (e) {\n          return Promise.reject(new Error('Unable to retrieve item from clipboard.'));\n        }\n      }\n\n      return text;\n    });\n\n    function getStringAsync() {\n      return _getStringAsync.apply(this, arguments);\n    }\n\n    return getStringAsync;\n  }(),\n  setString: function setString(text) {\n    var success = false;\n    var textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n\n    try {\n      document.execCommand('copy');\n      success = true;\n    } catch (e) {}\n\n    document.body.removeChild(textField);\n    return success;\n  },\n  addClipboardListener: function addClipboardListener() {},\n  removeClipboardListener: function removeClipboardListener() {}\n};","map":{"version":3,"mappings":";AAAA,eAAe;EACb,IAAIA,IAAJ,GAAQ;IACN,OAAO,eAAP;EACD,CAHY;;EAIPC,cAJO;IAAA,qDAIO;MAClB,IAAIC,IAAI,GAAG,EAAX;;MACA,IAAI;QACFA,IAAI,SAASC,SAAS,CAACC,SAAV,CAAoBC,QAApB,EAAb;MACD,CAFD,CAEE,OAAOC,CAAP,EAAU;QACV,IAAI;UAGFJ,IAAI,GAAGK,MAAM,CAACC,aAAP,CAAqBC,OAArB,CAA6B,MAA7B,CAAP;QACD,CAJD,CAIE,OAAOH,CAAP,EAAU;UACV,OAAOI,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,yCAAV,CAAf,CAAP;QACD;MACF;;MACD,OAAOV,IAAP;IACD,CAlBY;;IAAA;MAAA;IAAA;;IAAA;EAAA;EAmBbW,SAnBa,qBAmBHX,IAnBG,EAmBS;IACpB,IAAIY,OAAO,GAAG,KAAd;IACA,IAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAlB;IACAF,SAAS,CAACG,WAAV,GAAwBhB,IAAxB;IACAc,QAAQ,CAACG,IAAT,CAAcC,WAAd,CAA0BL,SAA1B;IACAA,SAAS,CAACM,MAAV;;IACA,IAAI;MACFL,QAAQ,CAACM,WAAT,CAAqB,MAArB;MACAR,OAAO,GAAG,IAAV;IACD,CAHD,CAGE,OAAOR,CAAP,EAAU,CAAE;;IACdU,QAAQ,CAACG,IAAT,CAAcI,WAAd,CAA0BR,SAA1B;IACA,OAAOD,OAAP;EACD,CA/BY;EAgCbU,oBAhCa,kCAgCO,CAAW,CAhClB;EAiCbC,uBAjCa,qCAiCU,CAAW;AAjCrB,CAAf","names":["name","getStringAsync","text","navigator","clipboard","readText","e","window","clipboardData","getData","Promise","reject","Error","setString","success","textField","document","createElement","textContent","body","appendChild","select","execCommand","removeChild","addClipboardListener","removeClipboardListener"],"sourceRoot":"","sources":["../src/ExpoClipboard.web.ts"],"sourcesContent":["export default {\n  get name(): string {\n    return 'ExpoClipboard';\n  },\n  async getStringAsync(): Promise<string> {\n    let text = '';\n    try {\n      text = await navigator.clipboard.readText();\n    } catch (e) {\n      try {\n        // Internet Explorer\n        // @ts-ignore\n        text = window.clipboardData.getData('Text');\n      } catch (e) {\n        return Promise.reject(new Error('Unable to retrieve item from clipboard.'));\n      }\n    }\n    return text;\n  },\n  setString(text: string): boolean {\n    let success = false;\n    const textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n    try {\n      document.execCommand('copy');\n      success = true;\n    } catch (e) {}\n    document.body.removeChild(textField);\n    return success;\n  },\n  addClipboardListener(): void {},\n  removeClipboardListener(): void {},\n};\n"]},"metadata":{},"sourceType":"module"}