{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { EventEmitter, UnavailabilityError } from 'expo-modules-core';\nimport ExpoClipboard from \"./ExpoClipboard\";\nvar emitter = new EventEmitter(ExpoClipboard);\nvar onClipboardEventName = 'onClipboardChanged';\nexport { EventEmitter };\nexport function getStringAsync() {\n  return _getStringAsync.apply(this, arguments);\n}\n\nfunction _getStringAsync() {\n  _getStringAsync = _asyncToGenerator(function* () {\n    if (!ExpoClipboard.getStringAsync) {\n      throw new UnavailabilityError('Clipboard', 'getStringAsync');\n    }\n\n    return yield ExpoClipboard.getStringAsync();\n  });\n  return _getStringAsync.apply(this, arguments);\n}\n\nexport function setString(text) {\n  if (!ExpoClipboard.setString) {\n    throw new UnavailabilityError('Clipboard', 'setString');\n  }\n\n  return ExpoClipboard.setString(text);\n}\nexport function addClipboardListener(listener) {\n  return emitter.addListener(onClipboardEventName, listener);\n}\nexport function removeClipboardListener(subscription) {\n  emitter.removeSubscription(subscription);\n}","map":{"version":3,"mappings":";AAAA,SAASA,YAAT,EAAqCC,mBAArC,QAAgE,mBAAhE;AAEA,OAAOC,aAAP;AAEA,IAAMC,OAAO,GAAG,IAAIH,YAAJ,CAAiBE,aAAjB,CAAhB;AAEA,IAAME,oBAAoB,GAAG,oBAA7B;AASA,SAAuBJ,YAAvB;AAQA,gBAAsBK,cAAtB;EAAA;AAAA;;;sCAAO,aAA6B;IAClC,IAAI,CAACH,aAAa,CAACG,cAAnB,EAAmC;MACjC,MAAM,IAAIJ,mBAAJ,CAAwB,WAAxB,EAAqC,gBAArC,CAAN;IACD;;IACD,aAAaC,aAAa,CAACG,cAAd,EAAb;EACD,C;;;;AAUD,OAAM,SAAUC,SAAV,CAAoBC,IAApB,EAAgC;EACpC,IAAI,CAACL,aAAa,CAACI,SAAnB,EAA8B;IAC5B,MAAM,IAAIL,mBAAJ,CAAwB,WAAxB,EAAqC,WAArC,CAAN;EACD;;EACD,OAAOC,aAAa,CAACI,SAAd,CAAwBC,IAAxB,CAAP;AACD;AAgBD,OAAM,SAAUC,oBAAV,CAA+BC,QAA/B,EAAwE;EAC5E,OAAON,OAAO,CAACO,WAAR,CAAoCN,oBAApC,EAA0DK,QAA1D,CAAP;AACD;AAeD,OAAM,SAAUE,uBAAV,CAAkCC,YAAlC,EAA4D;EAChET,OAAO,CAACU,kBAAR,CAA2BD,YAA3B;AACD","names":["EventEmitter","UnavailabilityError","ExpoClipboard","emitter","onClipboardEventName","getStringAsync","setString","text","addClipboardListener","listener","addListener","removeClipboardListener","subscription","removeSubscription"],"sourceRoot":"","sources":["../src/Clipboard.ts"],"sourcesContent":["import { EventEmitter, Subscription, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoClipboard from './ExpoClipboard';\n\nconst emitter = new EventEmitter(ExpoClipboard);\n\nconst onClipboardEventName = 'onClipboardChanged';\n\ntype ClipboardEvent = {\n  /**\n   * The new content of the user's clipboard.\n   */\n  content: string;\n};\n\nexport { Subscription, EventEmitter, ClipboardEvent };\n\n/**\n * Gets the content of the user's clipboard. Please note that calling this method on web will prompt\n * the user to grant your app permission to \"see text and images copied to the clipboard.\"\n *\n * @returns A promise that resolves to the content of the clipboard.\n */\nexport async function getStringAsync(): Promise<string> {\n  if (!ExpoClipboard.getStringAsync) {\n    throw new UnavailabilityError('Clipboard', 'getStringAsync');\n  }\n  return await ExpoClipboard.getStringAsync();\n}\n\n/**\n * Sets the content of the user's clipboard.\n *\n * @param text The string to save to the clipboard.\n *\n * @returns On web, this returns a boolean value indicating whether or not the string was saved to\n * the user's clipboard. On iOS and Android, nothing is returned.\n */\nexport function setString(text: string): void {\n  if (!ExpoClipboard.setString) {\n    throw new UnavailabilityError('Clipboard', 'setString');\n  }\n  return ExpoClipboard.setString(text);\n}\n\n/**\n * Adds a listener that will fire whenever the content of the user's clipboard changes. This method\n * is a no-op on Web.\n *\n * @param listener Callback to execute when listener is triggered. The callback is provided a\n * single argument that is an object with a `content` key.\n *\n * @example\n * ```typescript\n * addClipboardListener(({ content }: ClipboardEvent) => {\n *   alert('Copy pasta! Here's the string that was copied: ' + content);\n * });\n * ```\n */\nexport function addClipboardListener(listener: (event: ClipboardEvent) => void): Subscription {\n  return emitter.addListener<ClipboardEvent>(onClipboardEventName, listener);\n}\n\n/**\n * Removes the listener added by addClipboardListener. This method is a no-op on Web.\n *\n * @param subscription The subscription to remove (created by addClipboardListener).\n *\n * @example\n * ```typescript\n * const subscription = addClipboardListener(() => {\n *   alert('Copy pasta!');\n * });\n * removeClipboardListener(subscription);\n * ```\n */\nexport function removeClipboardListener(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n"]},"metadata":{},"sourceType":"module"}